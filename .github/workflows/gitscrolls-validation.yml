name: GitScrolls Validation Suite

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  validate-all:
    runs-on: ubuntu-latest
    name: Validate GitScrolls
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        buildkitd-flags: --debug
        driver-opts: |
          image=moby/buildkit:latest
    
    - name: Cache Docker layers
      uses: actions/cache@v4
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ hashFiles('**/Dockerfile', '**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-buildx-
    
    - name: Build test container
      uses: docker/build-push-action@v5
      with:
        context: .
        load: true
        tags: gitscrolls-markdown-validator-test:latest
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
    
    - name: Move cache
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache
    
    - name: Run markdownlint
      run: |
        echo "=== Running Markdown Linting ==="
        docker compose run --rm -e CI=true test npm run in_docker:lint
    
    - name: Run GitScrolls style validation scripts
      run: |
        echo "=== Running GitScrolls Style Validation Scripts ==="
        docker compose run --rm -e CI=true test bash .githooks/validate-gitscrolls-style.sh
    
    - name: Run syntax validation
      run: |
        echo "=== Running Markdown Syntax Validation ==="
        docker compose run --rm -e CI=true test npm run in_docker:test:syntax
    
    - name: Run style consistency validation
      run: |
        echo "=== Running Style Consistency Validation ==="
        docker compose run --rm -e CI=true test npm run in_docker:test:style
      continue-on-error: true  # Don't fail the build on style warnings
    
    - name: Run all tests with coverage
      run: |
        echo "=== Running All Tests with Coverage ==="
        docker compose run --rm -e CI=true test npm run in_docker:test:ci
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          coverage/
          *.log
        retention-days: 30